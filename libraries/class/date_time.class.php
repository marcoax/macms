<?phpclass date_time {	//	var $curDay;	var $curW;	var $curMonth;	var $curYear;	var $curTime;	/* giorni */	var $dayNames = array('en' => array("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"), 'it' => array("Domenica", "Luned�", "Marted�", "Mercoled�", "Giovedi", "Venerd�", "Sabato"), );	/*   mesi  */	var $monthNames = array('en' => array("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"), 'it' => array("Gennaio", "Febbraio", "Marzo", "Aprile", "Maggio", "Giugno", "Luglio", "Agosto", "Settembre", "Ottobre", "Novembre", "Dicembre"), );	// becco  la data	function get_Date($lang) {		$today = getdate();		$this -> curW = $this -> dayNames[$lang][$today['wday']];		$this -> curDay = $today['mday'];		$this -> curMonth = $this -> monthNames[$lang][$today['mon'] - 1];		$this -> curYear = $today['year'];	}	function setDate($date) {		return $this -> curDate = $date;	}	//mostro la  data	function show_Date() {		$dat = $this -> curW . ", " . $this -> curDay . " " . $this -> curMonth . " " . $this -> curYear;		return $dat;	}	// becco il Timestamp della data corrente	function getTime($format = "m-d-Y") {		$this -> curTime = date($format);		return $this -> curTime;	}	// function Compare  la  data	function compareDate($h = 0, $compData) {		$gg = 0;		$arrMyData = explode("-", $compData);		// la  variabile  h serve  per sattare se il calcolo va all'inizio o alla fine del giorno		$myData = mktime($h, 0, 0, $arrMyData[1], $arrMyData[2], $arrMyData[0]);		if ($myData > time())			$gg = 1;		return $gg;	}	//calcolo i giorni da inizio  anno;	function dateFromInizio() {		return date("z");	}	// calcola la dif tra due date  dove d2 � la data maggiore e d1 la nminore nel formato anno mese giorno	function getDiff($data1, $data2) {		$arrData1 = explode("-", $data1);		$arrData2 = explode("-", $data2);		$d1 = mktime(0, 0, 0, $arrData1[1], $arrData1[2], $arrData1[0]) . ' - ';		$d2 = mktime(0, 0, 0, $arrData2[1], $arrData2[2], $arrData2[0]) . ' - ';		$diff = round(($d2 - $d1) / (60 * 60 * 24));		// calcola la diff		return $diff;	}	// calcola la dif tra due date  dove d2 � la data maggiore e d1 la nminore nel formato anno mese giorno	function getDiffOre($data1, $data2) {		//$d1 = mktime(strtotime($data1));		//$d2 = mktime(strtotime($data2));		$d1 = strtotime($data1);		$d2 = strtotime($data2);		$diff = round(($d2 - $d1) / (60 * 60));		// calcola la diff		return $diff;	}	function getDiffMinuti($data1, $data2) {		//$d1 = mktime(strtotime($data1));		//$d2 = mktime(strtotime($data2));		$d1 = strtotime($data1);		$d2 = strtotime($data2);		$diff = round(($d2 - $d1) / (60));		// calcola la diff		return $diff;	}	// verifica  se la data esiste	function ceccaData($mese, $giorno, $anno) {		$is_True = 0;		if (checkdate($mese, $giorno, $anno))			$is_True = 1;		return $is_True;	}	//  cambia  revert il valore  di una data	function isDate() {		$arr = explode("-", $this -> curDate);		$this -> curDate = $arr[2] . '-' . $arr[1] . '-' . $arr[0];		return $this -> curDate = $this -> curDate;	}    // s  ritorna  l'offest in secondi, m, in minuti h, in ore	function get_timezone_offset($remote_tz, $origin_tz = null,$format="s") {		if ($origin_tz === null) {			if (!is_string($origin_tz = date_default_timezone_get())) {				return false;				// A UTC timestamp was returned -- bail out!			}		}		$origin_dtz = new DateTimeZone($origin_tz);		$remote_dtz = new DateTimeZone($remote_tz);		$origin_dt = new DateTime("now", $origin_dtz);		$remote_dt = new DateTime("now", $remote_dtz);		$offset = $origin_dtz -> getOffset($origin_dt) - $remote_dtz -> getOffset($remote_dt);		if($format=="s")return $offset;		else if($format=="m") return $offset/60; 		else if($format=="h") return $offset/3600; 	}	function get_user_time($curOffset, $date, $format = "Y-m-d H:i:s") {		$obj = new DateTime($date);		return $date = date($format, strtotime($obj -> format('Y-m-d H:i:s')) + $obj -> format($curOffset));	}	function getRealTime($userTimeZone, $date) {		date('Y-m-d H:i:s');		$this -> curOffset = $this -> get_timezone_offset($userTimeZone);		return $this -> get_user_time($this -> curOffset, $date);	}		function isValidDate ($dateString,$useEmpty=0) {		if($useEmpty==1 && $dateString=='0000-00-00') return  true;        $x = strtotime ($dateString);        if ($x === false || $x == -1) {                return false;        } else {                return true;        }}		}class opeDate extends date_time {	function setDate($date) {		return $this -> curDate = trim($date);	}	function addDate($num, $val) {		$this -> sel = "SELECT DATE_ADD('" . $this -> curDate . "', INTERVAL " . $num . " " . $val . ")";		return $this -> sel;	}	function stripHourMin($num, $val) {		$this -> sel = $this -> sel = "SELECT date_format(DATE_ADD('" . $this -> curDate . "', INTERVAL " . $num . " " . $val . "),'%H.%i')";		return $this -> sel;	}	function setOpen() {		return $this -> open;	}	function getOpen() {		return $this -> open;	}}class invDate  extends date_time {	function invDate($date) {		$this -> curDate = $date;		if (!empty($this -> curDate)) {			$arr = explode("-", $this -> curDate);			$this -> curDate = $arr[2] . '-' . $arr[1] . '-' . $arr[0];			$this -> curDate = ($this -> curDate == "00-00-0000" or trim($this -> curDate == '--')) ? '' : $this -> curDate;		}		return $this -> curDate;	}	function invDateTime($date) {		$this -> cDate = substr($date, 0, 10);		$this -> invDate($this -> cDate);		return $this -> curDate;	}	// THIS  FOR  THE  PHP5  COMPATIBILITY	function initInvDate($date) {		$obj = new invDate($date);		return $obj -> curDate;	}	function formatData($formato, $data) {		return date($formato, strtotime($data));	}	function formatTime($time, $limit = 5) {		return substr($time, 0, 5);	}}?>